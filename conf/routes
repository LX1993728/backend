# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# for customer weChat
GET    /confirmWechat            controllers.CustomerApp.confirmWeChat(signature: String,timestamp: String,nonce: String,echostr: String )
GET    /weChat/info              controllers.CustomerApp.getWeChatInfo()
GET    /weChat/userInfo          controllers.CustomerApp.getWeChatUserInfo(code:String,state:String)
GET    /weChat/smsConfirmCode    controllers.CustomerApp.getSMSConfirmCode(telephoneNumber:String)
GET    /weChat/follow            controllers.CustomerApp.getIsFollowWeChatInfo(code: String,name:String,posterId:String)
POST   /weChat/confirmSMSCode    controllers.CustomerApp.confirmSMSCodeAndBindWeChat()
POST    /weChat/jsapi/configInfo  controllers.CustomerApp.getWXJSConfigInfo()
#for  company wechat pay
PUT    /managers/:managerId/wxrecharge     controllers.ManagerApp.getBizCode(managerId:Long)

POST    /weChat/wxpay/notify      controllers.ManagerApp.getWXPayNotifyInfo()
POST    /weChat/wxpay/notify1      controllers.CustomerApp.getWXPayNotifyInfo1()
POST    /weChat/wxpay/notify2      controllers.CustomerApp.getWXPayNotifyInfo2()
POST     /customers/:customerId/companies/:companyId/orderinfo controllers.CustomerApp.getOrderInfo(customerId:Long,companyId: Long,type:Int)

GET    /managers/testTransfer     controllers.ManagerApp.testTransfer()
#test wechat transfer  money to company,has realize
GET   /weChat/transfer            controllers.ManagerApp.testWXTransfer()
#test  query customer order
GET   /weChat/wxpay/queryOrder    controllers.ManagerApp.getQueryOrder(tradeNo:String,type:Long)
POST /managers/:managerId/register/companycustomers  controllers.ManagerApp.registerCompanyCustomers(managerId:Long)
GET  /weChat/sharePoster/:posterId   controllers.CustomerApp.getSharePosterByPosterId(posterId:Long)

GET    /companies/:cId       controllers.ManagerApp.getCompany(cId: Long)
GET    /companies/:cId/managers/:mId  controllers.ManagerApp.getManager(cId: Long, mId: Long)
GET    /companies/:companyId/logo  controllers.CustomerApp.getLogoOfCompany(companyId: Long)
GET    /products/:productId/logo  controllers.CustomerApp.getLogoOfProduct(productId: Long)
GET    /companies              controllers.CustomerApp.getCompaniesByName(company: String)
POST   /companies   controllers.AdminApp.postPortalCompanies()
GET    /near-companies         controllers.CustomerApp.getCompaniesByLocation(longitude: Double, latitude: Double, startIndex: Integer)
GET    /near-broadcasts        controllers.CustomerApp.getBroadcastsByLocation(longitude: Double, latitude: Double, startIndex: Integer)
GET    /companyProducts        controllers.CustomerApp.queryCompanyProducts(product: String)
GET    /companies/:companyId/broadcast       controllers.CustomerApp.getCompanyBroadcast(companyId: Long)
GET    /companies/:companyId/companyProducts   controllers.CustomerApp.getCompanyProducts(companyId: Long)
GET    /companies/:companyId/companyProducts/two   controllers.CustomerApp.getTwoCompanyProducts(companyId: Long)

POST   /admins/authentication    controllers.AdminApp.adminLogin()
DELETE /admins/:id/authentication    controllers.AdminApp.adminLogout(id: Long)
POST   /admins/:adminId/companies  controllers.AdminApp.postCompanies(adminId: Long)
GET    /admins/:adminId/companies  controllers.AdminApp.getCompanies(adminId: Long)
PUT    /admins/:adminId/companies/:companyId  controllers.AdminApp.putCompanies(adminId: Long, companyId: Long)
POST   /admins/:adminId/companies/:companyId/logo  controllers.AdminApp.postLogoOfCompany(adminId: Long, companyId: Long)
GET    /admins/:adminId/companies/:companyId/managers  controllers.AdminApp.getManagers(adminId: Long, companyId: Long)
POST   /admins/:adminId/companies/:companyId/managers  controllers.AdminApp.postManagers(adminId: Long, companyId: Long)
PUT    /admins/:adminId/managers/:managerId  controllers.AdminApp.putManagers(adminId: Long, managerId: Long)
PUT    /admins/:adminId/managers/:managerId/password  controllers.AdminApp.resetPasswordForManager(adminId: Long, managerId: Long)
PUT    /admins/:adminId/manufacturers/:companyId  controllers.AdminApp.putManufacturers(adminId: Long, companyId: Long)
POST   /admins/:adminId/customers/passwordreset  controllers.AdminApp.resetPasswordForCustomer(adminId: Long)
POST   /admins/:adminId/companies/:companyId/companyAccountConfig   controllers.AdminApp.postCompanyAccountConfigs(adminId: Long, companyId: Long)

POST   /managers/authentication    controllers.ManagerApp.managerLogin()
DELETE /managers/:id/authentication    controllers.ManagerApp.managerLogout(id: Long)
PUT    /managers/:managerId/password  controllers.ManagerApp.resetPasswordForManager(managerId: Long)
GET    /managers/:managerId/lowLevelManagers   controllers.ManagerApp.getLowLevelManagers(managerId: Long)
POST   /managers/:managerId/lowLevelManagers   controllers.ManagerApp.postLowLevelManagers(managerId: Long)
PUT    /managers/:managerId/lowLevelManagers/:lowLevelManagerId  controllers.ManagerApp.putLowLevelManagers(managerId: Long, lowLevelManagerId: Long)
PUT    /managers/:managerId/lowLevelManagers/:lowLevelManagerId/password  controllers.ManagerApp.resetPasswordForLowLevelManager(managerId: Long, lowLevelManagerId: Long)
GET    /managers/:managerId/balance    controllers.ManagerApp.getBalance(managerId: Long)
GET    /managers/:managerId/password controllers.ManagerApp.getLostPassword(managerId: Long, email: String)
PUT    /managers/:managerId/myinfo     controllers.ManagerApp.updateInfo(managerId: Long)
POST   /managers/:managerId/logo  controllers.ManagerApp.postLogoOfCompany(managerId: Long)
POST   /managers/:managerId/antiFakePicture  controllers.ManagerApp.postAntiFakePicture(managerId: Long)
DELETE /managers/:managerId/antiFakePicture/:picture controllers.ManagerApp.removeAntiFakePicture(managerId: Long, picture: Long)
GET    /managers/:managerId/batches    controllers.ManagerApp.getBatches(managerId: Long)
GET    /managers/:managerId/freeBatches    controllers.ManagerApp.getFreeBatches(managerId: Long)
GET    /managers/:managerId/grouponBatches    controllers.ManagerApp.getGrouponBatches(managerId: Long)
PUT    /managers/:managerId/batches/:batchId    controllers.ManagerApp.updateBatch(managerId: Long, batchId: Long)
POST   /managers/:managerId/batches    controllers.ManagerApp.postBatch(managerId: Long)
POST   /managers/:managerId/companyProducts/:companyProductId/companyProductBatches    controllers.ManagerApp.postCompanyProductBatches(managerId: Long, companyProductId: Long)
GET    /managers/:managerId/companyProductBatches  controllers.ManagerApp.getCompanyProductBatches(managerId: Long)
GET    /managers/:managerId/companyProductBatchesAvailableToMe  controllers.ManagerApp.getCompanyProductBatchesAvaiableToMe(managerId: Long)
GET    /managers/:managerId/customers/:customerId/companyProductTickets  controllers.ManagerApp.getCompanyProductTickets(managerId: Long, customerId: Long)
POST   /managers/:managerId/companyProductTickets  controllers.ManagerApp.postCompanyProductTickets(managerId: Long)
GET    /managers/:managerId/customers/:customerId/  controllers.ManagerApp.getCompanyProductTickets(managerId: Long, customerId: Long)
POST   /managers/:managerId/  controllers.ManagerApp.postCompanyProductTickets(managerId: Long)
GET    /managers/:managerId/issueRules    controllers.ManagerApp.getIssueRules(managerId: Long)
PUT    /managers/:managerId/issueRules/:ruleId controllers.ManagerApp.updateIssueRule(managerId: Long, ruleId: Long)
POST   /managers/:managerId/issueRules controllers.ManagerApp.postIssueRule(managerId: Long)
GET    /managers/:managerId/useRules   controllers.ManagerApp.getUseRules(managerId: Long)
PUT    /managers/:managerId/useRules/:ruleId controllers.ManagerApp.updateUseRule(managerId: Long, ruleId: Long)
POST   /managers/:managerId/useRules   controllers.ManagerApp.postUseRule(managerId: Long)
GET    /managers/:managerId/freeBatchesAvailableToMe   controllers.ManagerApp.getFreeBatchesAvailableToMe(managerId: Long)
GET    /managers/:managerId/grouponBatchesAvailableToMe   controllers.ManagerApp.getGrouponBatchesAvailableToMe(managerId: Long)
GET    /managers/:managerId/staticsConsumes controllers.ManagerApp.getStaticsConsumes(managerId: Long, customerName: String, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticsManufacturerConsumes controllers.ManagerApp.staticsManufacturerConsumes(managerId: Long, customerName: String, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticsManufacturerConsumesByCompany/:companyId controllers.ManagerApp.staticsManufacturerConsumesByCompany(managerId: Long, companyId: Long,companyProductId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticsManufacturerConsumesByCompanyProductDetail/:companyId controllers.ManagerApp.staticsManufacturerConsumesByCompanyProductDetail(managerId: Long, companyId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/staticsManufacturerConsumesTotalSaleByCompany/:companyProductId controllers.ManagerApp.staticsManufacturerConsumesByProduct(managerId: Long,companyProductId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/AntiFakePicture/:pictureId  controllers.ManagerApp.getAntiFakePictureForManufacturer(managerId: Long, pictureId: Long )
GET    /managers/:managerId/staticsBatchHits controllers.ManagerApp.getStaticsBatchHits(managerId: Long, batchId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticsHomePageHits controllers.ManagerApp.getStaticsHomePageHits(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticsProductHits controllers.ManagerApp.getStaticsProductHits(managerId: Long, productId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticsPosterHits controllers.ManagerApp.getStaticsPosterHits(managerId: Long, posterId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticscustomers controllers.ManagerApp.getStaticsCustomers(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/staticsissues controllers.ManagerApp.getStaticsIssues(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/staticsDirectissues controllers.ManagerApp.getStaticsDirectIssues(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/staticsTicketRequest controllers.ManagerApp.getStaticsTicketRequest(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/staticsacceptsbyaccept controllers.ManagerApp.getStaticsAcceptsByAccept(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/staticsacceptsbyissuedcompany   controllers.ManagerApp.getStaticsAcceptsByIssuedCompany(managerId: Long, issuedCompanyId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticsacceptsbyusedcompany   controllers.ManagerApp.getStaticsAcceptsByUsedCompany(managerId: Long, usedCompanyId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer, startIndex: Integer)
GET    /managers/:managerId/staticsacceptsbyissue controllers.ManagerApp.getStaticsAcceptsByIssue(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/staticstransfers controllers.ManagerApp.getStaticsTransfers(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/companyaccounts controllers.ManagerApp.getCompanyAccounts(managerId: Long, fy: Integer, fm: Integer, fd: Integer, ty: Integer, tm: Integer, td: Integer)
GET    /managers/:managerId/customers/:customerId/confirmcode controllers.ManagerApp.getConfirmCode(managerId: Long, customerId: Long)
GET   /managers/:managerId/customers/:customerId/initConfirmCode controllers.ManagerApp.getInitConfirmCode(managerId: Long, customerId: Long)
POST  /managers/:managerId/customers/:customerId/confirmCode controllers.ManagerApp.postConfirmCode(managerId: Long, customerId: Long)
GET   /managers/:managerId/companies  controllers.ManagerApp.getCompanies(managerId: Long)
#for manufacturers
GET   /managers/:managerId/companies/:companyId  controllers.ManagerApp.getCommonCompany(managerId: Long, companyId: Long)
GET   /managers/:managerId/manufacturersByName  controllers.ManagerApp.getManufacturersByName(managerId: Long, companyName: String)
GET   /managers/:managerId/manufacturers  controllers.ManagerApp.getManufacturers(managerId: Long)
GET   /managers/:managerId/exclusiveCompanies controllers.ManagerApp.getExclusiveCompanies(managerId: Long)
GET   /managers/:managerId/manufacturers/:companyId  controllers.ManagerApp.getManufacturer(managerId: Long, companyId: Long)
POST   /managers/:managerId/manufacturers  controllers.ManagerApp.postManufacturers(managerId: Long)
PUT   /managers/:managerId/manufacturers controllers.ManagerApp.putManufacturers(managerId: Long)
PUT   /managers/:managerId/exclusiveCompanies/:companyId  controllers.ManagerApp.putExclusiveCompanies(managerId: Long, companyId: Long)
DELETE /managers/:managerId/manufacturers/:companyId  controllers.ManagerApp.deleteManufacturers(managerId: Long, companyId: Long)
DELETE /managers/:managerId/exclusiveCompanies/:companyId  controllers.ManagerApp.deleteExclusiveCompanies(managerId: Long, companyId: Long)
PUT   /managers/:managerId/companyProducts/:companyProductId/license  controllers.ManagerApp.putLicensedCompanyProducts(managerId: Long, companyProductId: Long)
GET   /managers/:managerId/manufacturerProducts  controllers.ManagerApp.manufacturerProducts(managerId: Long, companyId: Long)
POST   /managers/:managerId/services  controllers.ManagerApp.postServices(managerId: Long)
GET   /managers/:managerId/services  controllers.ManagerApp.services(managerId: Long)
PUT   /managers/:managerId/companyProducts/:companyProductId/services  controllers.ManagerApp.putCompanyProductServices(managerId: Long, companyProductId: Long)
DELETE  /managers/:managerId/services/:serviceId  controllers.ManagerApp.deleteService(managerId: Long, serviceId: Long)
#for company group
GET   /managers/:managerId/companyGroups  controllers.ManagerApp.getCompanyGroups(managerId: Long)
POST  /managers/:managerId/companyGroups  controllers.ManagerApp.postCompanyGroups(managerId: Long)
POST  /managers/:managerId/groupMembers  controllers.ManagerApp.postGroupMembers(managerId: Long)
PUT   /managers/:managerId/groupMembers  controllers.ManagerApp.putGroupMembers(managerId: Long)
POST /managers/:managerId/groupBatchAndIssueRules  controllers.ManagerApp.postGroupBatchAndIssueRules(managerId: Long)
POST /managers/:managerId/groupUseRules  controllers.ManagerApp.postGroupUseRules(managerId: Long)
DELETE  /managers/:managerId/companyGroups/:companyGroupId  controllers.ManagerApp.deleteCompanyGroups(managerId: Long, companyGroupId: Long)
DELETE  /managers/:managerId/companyGroups/:companyGroupId/groupMembers/:companyId  controllers.ManagerApp.deleteGroupMembers(managerId: Long, companyGroupId: Long, companyId: Long)
DELETE  /managers/:managerId/companyGroupBatch/:batchId   controllers.ManagerApp.deleteCompanyGroupBatch(managerId: Long,batchId: Long)
GET   /managers/:managerId/associateCompanies  controllers.ManagerApp.getAssociateCompanies(managerId: Long)
POST  /managers/:managerId/associateCompanies  controllers.ManagerApp.postAssociateCompanies(managerId: Long)
DELETE /managers/:managerId/associateCompanies/:companyId  controllers.ManagerApp.deleteAssociateCompanies(managerId: Long, companyId: Long)
GET    /managers/:managerId/customers          controllers.ManagerApp.getCustomers(managerId: Long, customerName: String)
POST   /managers/:managerId/customers          controllers.ManagerApp.postCustomers(managerId: Long)
GET    /managers/:managerId/customers/:customerId/freeTickets  controllers.ManagerApp.getFreeTickets(managerId: Long, customerId: Long)
GET    /managers/:managerId/customers/:customerId/grouponTickets  controllers.ManagerApp.getGrouponTickets(managerId: Long, customerId: Long)
POST   /managers/:managerId/customers/:customerId/consumes controllers.ManagerApp.postConsumes(managerId: Long, customerId: Long)
POST   /managers/:managerId/customers/:customerId/quickConsumes controllers.ManagerApp.postQuickConsume(managerId: Long, customerId: Long)
POST   /managers/:managerId/customers/:customerId/tickets  controllers.ManagerApp.postDirectTickets(managerId: Long, customerId: Long)
PUT    /managers/:managerId/customers/:customerId/tickets  controllers.ManagerApp.putDirectTickets(managerId: Long, customerId: Long)
POST   /managers/:managerId/companyCustomers/:companyCustomerId/tickets controllers.ManagerApp.postTickets(managerId: Long, companyCustomerId: Long)
GET    /managers/:managerId/companyCustomers   controllers.ManagerApp.getCompanyCustomers(managerId: Long, customerName: String)
GET    /managers/:managerId/allcompanyCustomers   controllers.ManagerApp.getAllCompanyCustomers(managerId: Long, startIndex: Integer)
GET    /managers/:managerId/allcompanyAccounts   controllers.ManagerApp.getAllCompanyAccounts(managerId: Long, startIndex: Integer)
POST   /managers/:managerId/customers/:customerId/companyCustomers   controllers.ManagerApp.postCompanyCustomers(managerId: Long, customerId:Long)
PUT    /managers/:managerId/companyCustomers/:companyCustomerId/discount   controllers.ManagerApp.putCompanyCustomerDiscount(managerId: Long, companyCustomerId: Long)
PUT    /managers/:managerId/companyCustomers/:companyCustomerId/recharge   controllers.ManagerApp.rechargeCompanyCustomer(managerId: Long, companyCustomerId: Long)
GET    /managers/:managerId/companyCustomers/:companyCustomerId/consumes   controllers.ManagerApp.getCompanyCustomerConsumes(managerId: Long, companyCustomerId: Long)
POST   /managers/:managerId/companyCustomers/:companyCustomerId/consumes   controllers.ManagerApp.postCompanyCustomerConsumes(managerId: Long, companyCustomerId: Long)
#PUT    /managers/:managerId/tickets/:ticketId controllers.ManagerApp.updateTicket(managerId: Long, ticketId: Long)
GET    /managers/:myId/managers/:managerId/logs/latest    controllers.ManagerApp.getLatestLog(myId: Long, managerId: Long)
GET    /managers/:myId/managers/:managerId/logs/:logId/previous   controllers.ManagerApp.getPreviousLog(myId: Long, managerId: Long, logId: Long)
POST   /managers/:managerId/products/:productId/logo  controllers.ManagerApp.postLogoOfProduct(managerId: Long, productId: Long)
GET   /managers/:managerId/diningProducts  controllers.ManagerApp.getDiningProducts(managerId: Long)
GET   /managers/:managerId/vehicleProducts  controllers.ManagerApp.getVehicleProducts(managerId: Long)
POST   /managers/:managerId/diningProducts  controllers.ManagerApp.postDiningProducts(managerId: Long)
POST   /managers/:managerId/vehicleProducts  controllers.ManagerApp.postVehicleProducts(managerId: Long)
PUT   /managers/:managerId/diningProducts/:companyProductId  controllers.ManagerApp.putDiningProducts(managerId: Long, companyProductId: Long)
PUT   /managers/:managerId/vehicleProducts/:companyProductId  controllers.ManagerApp.putVehicleProducts(managerId: Long, companyProductId: Long)
POST   /managers/:managerId/companyProducts/:companyProductId/prices  controllers.ManagerApp.postCompanyProductPrices(managerId: Long, companyProductId: Long)
DELETE  /managers/:managerId/companyProducts/:companyProductId  controllers.ManagerApp.deleteCompanyProduct(managerId: Long, companyProductId: Long)
GET   /managers/:managerId/companyProducts/:companyProductId/services controllers.ManagerApp.getCompanyProductServices(managerId: Long, companyProductId: Long)
GET   /managers/:managerId/companyProducts/:companyProductId/companyProductConsumeServices controllers.ManagerApp.getCompanyProductConsumeServicesByProduct(managerId: Long, companyProductId: Long, startIndex: Integer)
GET   /managers/:managerId/customers/:customerId/companyProductConsumeServices controllers.ManagerApp.getCompanyProductConsumeServicesByCustomer(managerId: Long, customerId: Long, startIndex: Integer)
POST   /managers/:managerId/companyProducts/:companyProductId/services controllers.ManagerApp.postCompanyProductServices(managerId: Long, companyProductId: Long)
DELETE  /managers/:managerId/companyProductServices/:serviceId  controllers.ManagerApp.deleteCompanyProductService(managerId: Long, serviceId: Long)
GET   /managers/:managerId/broadcasts  controllers.ManagerApp.getBroadcasts(managerId: Long)
GET   /managers/:managerId/notifications  controllers.ManagerApp.getNotifications(managerId: Long)
POST  /managers/:managerId/advertisements  controllers.ManagerApp.postAdvertisements(managerId: Long)
POST  /managers/:managerId/companyFreeTickets  controllers.ManagerApp.postCompanyFreeTickets(managerId: Long)
POST   /managers/:managerId/companyGrouponTickets  controllers.ManagerApp.postCompanyGrouponTickets(managerId: Long)
GET  /managers/:managerId/bookings/all   controllers.ManagerApp.getAllBookings(managerId: Long, customerName: String, after: Long)
GET  /managers/:managerId/bookings/new   controllers.ManagerApp.getNewBookings(managerId: Long, customerName: String, after: Long)
GET  /managers/:managerId/bookings/rejected   controllers.ManagerApp.getRejectedBookings(managerId: Long, customerName: String, after: Long)
GET  /managers/:managerId/bookings/accepted   controllers.ManagerApp.getAcceptedBookings(managerId: Long, customerName: String, after: Long)
GET  /managers/:managerId/bookings/latest   controllers.ManagerApp.getLatestBookings(managerId: Long)
GET  /managers/:managerId/bookings/soon   controllers.ManagerApp.getBookingsOfToday(managerId: Long)
GET  /managers/:managerId/bookings/:bookingId   controllers.ManagerApp.getBooking(managerId: Long, bookingId: Long)
POST /managers/:managerId/bookings              controllers.ManagerApp.postBooking(managerId: Long)
PUT  /managers/:managerId/bookings/:bookingId/accept   controllers.ManagerApp.acceptBooking(managerId: Long, bookingId: Long)
PUT  /managers/:managerId/bookings/:bookingId/reject   controllers.ManagerApp.rejectBooking(managerId: Long, bookingId: Long)
GET  /managers/:managerId/integralStrategies   controllers.ManagerApp.getIntegralStrategy(managerId: Long)
POST /managers/:managerId/integralStrategies   controllers.ManagerApp.postIntegralStrategy(managerId: Long)
PUT  /managers/:managerId/integralStrategies/:integralStrategyId controllers.ManagerApp.updateIntegralStrategy(managerId: Long, integralStrategyId: Long)
PUT  /managers/:managerId/companyCustomers/:companyCustomerId/integral   controllers.ManagerApp.integralCompanyCustomer(managerId: Long, companyCustomerId: Long)
PUT  /managers/:managerId/recharge      controllers.ManagerApp.recharge(managerId: Long)
POST   /managers/recharge/notify        controllers.ManagerApp.handleAlipayNotify()
GET    /managers/recharge/return        controllers.ManagerApp.handleAlipayReturn(out_trade_no: String, trade_no: String, trade_status: String, total_fee: String, seller_id: String)

POST   /customers/authentication    controllers.CustomerApp.customerLogin()
POST   /customers/register    controllers.CustomerApp.register()
POST   /customers/confirmcode    controllers.CustomerApp.customerConfirmCodeForChangePassword()
POST   /customers/password       controllers.CustomerApp.changePassword()
POST   /customers/staticsHits    controllers.CustomerApp.staticsHits()
DELETE /customers/:id/authentication    controllers.CustomerApp.customerLogout(id: Long)
GET    /customers/:customerId/companies/:companyId/companyCustomer  controllers.CustomerApp.getCompanyCustomerInfo(customerId:Long,companyId:Long)
GET    /customers/:customerId/ticketsByCompanyTicket controllers.CustomerApp.getTicketsByCompanyTicket(customerId: Long, companyTicketId: Long)
GET    /customers/:customerId/antiFakePicture/:pictureId controllers.CustomerApp.getAntiFakePicture(customerId: Long, pictureId: Long)
GET    /customers/:customerId/antiFakePictureNoVersion/:pictureId controllers.CustomerApp.getAntiFakePictureNoVersion(customerId: Long, pictureId: Long)
PUT    /customers/:customerId/tickets/:ticketId/isremoved controllers.CustomerApp.removeTicket(customerId: Long, ticketId: Long)
GET    /customers/:customerId/tickets/:ticketId/companies controllers.CustomerApp.getCompaniesAcceptTicket(customerId: Long, ticketId: Long)
GET    /customers/:customerId/tickets/:ticketId/companies/:companyId/useRules controllers.CustomerApp.getUseRulesForTicket(customerId: Long, ticketId: Long, companyId: Long)
POST   /customers/:customerId/transfers  controllers.CustomerApp.postTransfer(customerId: Long)
GET    /customers/:customerId/consumes controllers.CustomerApp.getConsumes(customerId: Long)
GET    /customers/:customerId/transfers controllers.CustomerApp.getTransfers(customerId: Long, type: String)
GET    /customers/:customerId/confirmcode controllers.CustomerApp.getConfirmCode(customerId: Long)
POST    /customers/:customerId/confirmcode controllers.CustomerApp.postConfirmCode(customerId: Long)
POST    /customers/:customerId/dynamicconfirmcode controllers.CustomerApp.postDynamicConfirmCode(customerId: Long)
GET    /customers/:customerId/infos controllers.CustomerApp.getInfos(customerId: Long, startIndex: Integer)
GET    /customers/:customerId/systemInfos controllers.CustomerApp.getSystemInfos(customerId: Long, startIndex: Integer)
GET    /customers/:customerId/companies/:companyId/infos controllers.CustomerApp.getCompanyInfos(customerId: Long, companyId: Long, startIndex: Integer)
PUT    /customers/:customerId/infos/:infoId/beenRead controllers.CustomerApp.setInfoBeenRead(customerId: Long, infoId: Long)
PUT    /customers/:customerId/infos/:infoId/isTagged controllers.CustomerApp.setInfoIsTagged(customerId: Long, infoId: Long)
PUT    /customers/:customerId/infos/:infoId/isremoved controllers.CustomerApp.removeInfo(customerId: Long, infoId: Long)
POST   /customers/:customerId/infos/:infoId/request  controllers.CustomerApp.requestTicketByInfo(customerId: Long, infoId: Long)
POST   /customers/:customerId/infos/:infoId/send  controllers.CustomerApp.sendInfo(customerId: Long, infoId: Long)
POST   /customers/:customerId/posters/:posterId/request  controllers.CustomerApp.requestTicketByPoster(customerId: Long, posterId: Long)
GET    /customers/:customerId/companyCustomers   controllers.CustomerApp.getCompanyCustomers(customerId: Long, startIndex: Integer)
GET    /customers/:customerId/companies/:companyId/isCompanyCustomer  controllers.CustomerApp.isCompanyCustomer(customerId: Long, companyId: Long)
GET    /companyCustomers/:companyCustomerId/tickets   controllers.CustomerApp.getTicketsOfCompanyCustomer(companyCustomerId: Long, startIndex: Integer)
GET    /customers/:customerId/companies/:companyId/tickets   controllers.CustomerApp.getTicketNumbers(customerId: Long, companyId: Long)
GET    /companyCustomers/:companyCustomerId/consumeAndRechargeInfos   controllers.CustomerApp.getConsumeAndRechargeInfosOfCompanyCustomer(companyCustomerId: Long, startIndex: Integer)
GET    /companyCustomers/:companyCustomerId/consumeAndIntegralInfos   controllers.CustomerApp.getConsumeAndIntegralInfosOfCompanyCustomer(companyCustomerId: Long, startIndex: Integer)
GET    /customers/:customerId/favorates   controllers.CustomerApp.getFavorates(customerId: Long)
GET    /customers/:customerId/favorateCompanies   controllers.CustomerApp.getFavorateCompanies(customerId: Long, companyId: Long)
GET    /customers/:customerId/favorateProducts   controllers.CustomerApp.getFavorateProducts(customerId: Long, companyProductId: Long)
GET    /customers/:customerId/favoratePosters   controllers.CustomerApp.getFavoratePosters(customerId: Long, posterId: Long)
POST   /customers/:customerId/favorateCompanies  controllers.CustomerApp.postFavorateCompany(customerId: Long)
POST   /customers/:customerId/favorateProducts  controllers.CustomerApp.postFavorateProduct(customerId: Long)
POST   /customers/:customerId/favoratePosters controllers.CustomerApp.postFavoratePoster(customerId: Long)
DELETE  /customers/:customerId/favorates/:favorateId  controllers.CustomerApp.deleteFavorate(customerId: Long, favorateId: Long)
# status 0: new, 1: accepted, 2: reject, 3: cancelled, 4: consumed
GET    /customers/:customerId/bookings   controllers.CustomerApp.getBookingsByCustomer(customerId: Long, status: Integer, after: Long)
GET    /companyCustomers/:companyCustomerId/bookings   controllers.CustomerApp.getBookingsByCompanyCustomer(companyCustomerId: Long, status: Integer, after: Long)
POST   /customers/:customerId/bookings   controllers.CustomerApp.postBooking(customerId: Long)
DELETE /customers/:customerId/bookings/:bookingId  controllers.CustomerApp.cancelBooking(customerId: Long, bookingId: Long)
GET    /customers/:customerId/companyProductConsumeServices  controllers.CustomerApp.getCompanyProductConsumeServices(customerId: Long)
GET    /customers/:customerId/companyProducts/:companyProductId/distributors  controllers.CustomerApp.getDistributors(customerId: Long, companyProductId: Long)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

